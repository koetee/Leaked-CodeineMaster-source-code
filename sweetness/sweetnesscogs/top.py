import pymongo
import disnake
import json
from disnake.ext import commands
from disnake import Localized
from disnake.enums import ButtonStyle, TextInputStyle

cluster = pymongo.MongoClient(f"mongodb://127.0.0.1/myFirstDatabase?retryWrites=true&w=majority")

files = cluster.sweetness.files

currentTopPage = {}
selectTop = {}

min = 60
hour = 60 * 60
day = 60 * 60 * 24

class TopList(disnake.ui.View):
    def __init__(self, author: int):
        super().__init__()
        if not str(author) in currentTopPage or currentTopPage[str(author)] == 0:
            self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.secondary, custom_id="top_first_page", emoji=f"{files.find_one({'_id': 'double_left'})['emoji_take']}", disabled = True))
            self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.secondary, custom_id="top_prev_page", emoji=f"{files.find_one({'_id': 'left'})['emoji_take']}", disabled = True))
        else:
            self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.secondary, custom_id="top_first_page", emoji=f"{files.find_one({'_id': 'double_left'})['emoji_take']}"))
            self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.secondary, custom_id="top_prev_page", emoji=f"{files.find_one({'_id': 'left'})['emoji_take']}"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.secondary, custom_id="top_exit", emoji=f"{files.find_one({'_id': 'basket'})['emoji_take']}"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.secondary, custom_id="top_right_page", emoji=f"{files.find_one({'_id': 'right'})['emoji_take']}"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.secondary, custom_id="top_last_page", emoji=f"{files.find_one({'_id': 'double_right'})['emoji_take']}"))

class ActionListDropdown(disnake.ui.Select):
    def __init__(self):
        super().__init__(
            placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–ø–∞",
            options = [
                disnake.SelectOption(label="–ë–∞–ª–∞–Ω—Å", value = "top_balance_main", description="–¢–æ–ø –ø–æ –±–∞–ª–∞–Ω—Å—É", emoji=f"<:amitobal:1158567849707716708>"),
                disnake.SelectOption(label="–°–æ–æ–±—â–µ–Ω–∏—è", value = "top_message_main", description="–¢–æ–ø –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—è–º", emoji=f"<:smsonline:1153488350821503058>"),
                disnake.SelectOption(label="–û–Ω–ª–∞–π–Ω", value = "top_online_main", description="–¢–æ–ø –ø–æ –æ–Ω–ª–∞–π–Ω—É", emoji=f"<:clock11:1111709651109695560>"),
                disnake.SelectOption(label="–õ–∞–≤ —Ä—É–º—ã", value = "top_love_main", description="–¢–æ–ø –ø–æ –ª–∞–≤ —Ä—É–º–∞–º", emoji=f"<:clock11:1111709651109695560>"),
                disnake.SelectOption(label="–†–µ–ø—É—Ç–∞—Ü–∏—è", value = "top_rep_main", description="–¢–æ–ø –ø–æ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏", emoji=f"<:clock11:1111709651109695560>"),
            ],
        )

class TopListRoomViewBalance(disnake.ui.View):
    def __init__(self):
        super().__init__()
        self.add_item(ActionListDropdown())
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.secondary, label="–í—ã—Ö–æ–¥", custom_id="exit_profile", emoji=f"{files.find_one({'_id': 'basket'})['emoji_take']}"))

async def get_member_ids(collection_name, key):
    membersID = []
    collection = cluster.sweetness[collection_name]
    cursor = collection.find().sort(key, -1)
    for document in cursor:
        membersID.append(document["_id"])
    return membersID

class topcog(commands.Cog):
    def __init__(self, bot: commands.Bot(intents = disnake.Intents.all(), command_prefix = "!")):
        self.bot = bot

    @commands.slash_command(description="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–ø, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å")
    async def top(inter, –≤—ã–±–µ—Ä–∏: str = commands.Param(choices=[
        Localized("–ë–∞–ª–∞–Ω—Å", key="A"),
        Localized("–°–æ–æ–±—â–µ–Ω–∏—è", key="B"),
        Localized("–û–Ω–ª–∞–π–Ω", key="C"),
        Localized("–õ–∞–≤ —Ä—É–º—ã", key="D"),
        Localized("–†–µ–ø—É—Ç–∞—Ü–∏—è", key="F"),
    ])):
        await inter.response.defer()
        idd = 1
        description = ""
        items_per_page = 10
        selectTop[str(inter.author.id)] = –≤—ã–±–µ—Ä–∏
    
        if str(inter.author.id) not in currentTopPage:
            currentTopPage[str(inter.author.id)] = 0
    
        if –≤—ã–±–µ—Ä–∏ == "–ë–∞–ª–∞–Ω—Å":
            collection_name = "economy"
            output = "balance"
            emoji=f"<:amitobal:1158567849707716708> "
            membersID = await get_member_ids("economy", "balance")
        elif –≤—ã–±–µ—Ä–∏ == "–°–æ–æ–±—â–µ–Ω–∏—è":
            collection_name = "message"
            output = "message_count"
            emoji=f"<:smsonline:1153488350821503058>"
            membersID = await get_member_ids("message", "message_count")
        elif –≤—ã–±–µ—Ä–∏ == "–û–Ω–ª–∞–π–Ω":
            collection_name = "online"
            output = "online"
            emoji=f"<:clock:1096090255402221658>"
            membersID = await get_member_ids("online", "online")
        elif –≤—ã–±–µ—Ä–∏ == "–õ–∞–≤ —Ä—É–º—ã":
            collection_name = "love_online"
            output = "Love_online"
            emoji=f"<:clock:1096090255402221658>"
            membersID = await get_member_ids("love_online", "Love_online")
        elif –≤—ã–±–µ—Ä–∏ == "–†–µ–ø—É—Ç–∞—Ü–∏—è":
            collection_name = "reputation"
            output = "rep"
            emoji=f"<:clock:1096090255402221658>"
            membersID = await get_member_ids("reputation", "rep")
    
        pages = [membersID[i:i + items_per_page] for i in range(0, len(membersID), items_per_page)]

        emoji_numbers = [
            "<:11:1138468003026059325>", "<:21:1138800607931674744>",
            "<:31:1138467999012110367>", "<:four:1151556783207366706>",
            "<:five:1151556781550612541>", "<:six:1151556790367035502>",
            "<:seven:1151556787741409480>", "<:eight:1151556778983690342>",
            "<:nine:1151556784675360920>", "<:ten:1151556792430624839>"
        ]


        if –≤—ã–±–µ—Ä–∏ in ["–û–Ω–ª–∞–π–Ω", "–õ–∞–≤ —Ä—É–º—ã"]:
            for member_id in pages[0]:
                collection = cluster.sweetness[collection_name]
                N = collection.find_one({"_id": str(member_id)})[output]
                emoji_number = emoji_numbers[idd - 1] if 0 <= idd <= len(emoji_numbers) else ""
                description += f"**{emoji_number} ‚Äî <@{member_id}>** {emoji} **{N // hour}**—á. **{(N - (N // hour * hour)) // 60}**–º.\n\n"
                idd += 1
        else:
            for member_id in pages[0]:
                collection = cluster.sweetness[collection_name]
                N = collection.find_one({"_id": str(member_id)})[output]
                emoji_number = emoji_numbers[idd - 1] if 0 <= idd <= len(emoji_numbers) else ""
                description += f"**{emoji_number} ‚Äî <@{member_id}>** {emoji} {N}\n\n"
                idd += 1

        embed = disnake.Embed(description=description, color=3092790)
        embed.set_author(name = f"üìã –¢–æ–ø –ø–æ {–≤—ã–±–µ—Ä–∏}", icon_url = inter.guild.icon.url)
        embed.set_thumbnail(url=inter.author.display_avatar.url)
        embed.set_footer(text=f"–ó–∞–ø—Ä–æ—Å–∏–ª(–∞) {inter.author}", icon_url=inter.author.display_avatar.url)
        return await inter.send(content=inter.author.mention, embed=embed, view=TopList(inter.author.id))
    
    @commands.Cog.listener()
    async def on_button_click(self, inter):
        custom_id = inter.component.custom_id
        if custom_id[:3] == "top":
            if not inter.message.content == inter.author.mention:
                embed = disnake.Embed(description=f"{inter.author.mention}, **–í—ã** –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å **—á—É–∂–∏–µ –∫–Ω–æ–ø–∫–∏!**", color=3092790)
                embed.set_author(name = "–¢–æ–ø—ã", icon_url = inter.guild.icon.url)
                embed.set_thumbnail(url=inter.author.display_avatar.url)
                return await inter.send(ephemeral=True, embed=embed)

            idd = 1
            items_per_page = 10
            –≤—ã–±–µ—Ä–∏ = selectTop[str(inter.author.id)]

            if str(inter.author.id) not in currentTopPage:
                currentTopPage[str(inter.author.id)] = 0

            top_options = {
                "–ë–∞–ª–∞–Ω—Å": ("economy", "balance", "<:amitobal:1158567849707716708> "),
                "–°–æ–æ–±—â–µ–Ω–∏—è": ("message", "message_count", "<:smsonline:1153488350821503058>"),
                "–û–Ω–ª–∞–π–Ω": ("online", "online", "<:clock:1096090255402221658>"),
                "–õ–∏—á–Ω—ã–µ –ö–æ–º–Ω–∞—Ç—ã": ("room_online", "day", "<:clock:1096090255402221658>"),
                "–†–µ–ø—É—Ç–∞—Ü–∏—è": ("reputation", "rep", "<:clock:1096090255402221658>"),
                "–õ–∞–≤ —Ä—É–º—ã": ("love_online", "Love_online", "<:clock:1096090255402221658>")
            }

            if –≤—ã–±–µ—Ä–∏ in top_options:
                collection_name, output, emoji = top_options[–≤—ã–±–µ—Ä–∏]
                membersID = await get_member_ids(collection_name, output)
            else:
                # Handle invalid –≤—ã–±–µ—Ä–∏ value here
                return

            pages = [membersID[i:i + items_per_page] for i in range(0, len(membersID), items_per_page)]

            embed = disnake.Embed(description = "", color=3092790)

            if not str(inter.author.id) in currentTopPage:
                currentTopPage[str(inter.author.id)] = 0
            if custom_id == "top_first_page":
                currentTopPage[str(inter.author.id)] = 0
            if custom_id == "top_prev_page":
                if currentTopPage[str(inter.author.id)] > 0:
                    currentTopPage[str(inter.author.id)] -= 1
            if custom_id == "top_exit":
                return await inter.message.delete()
            if custom_id == "top_right_page":
                if currentTopPage[str(inter.author.id)] < len(pages) - 1:
                    currentTopPage[str(inter.author.id)] += 1
            if custom_id == "top_last_page":
                currentTopPage[str(inter.author.id)] = len(pages) - 1

            emoji_numbers = [
                "<:11:1138468003026059325>", "<:21:1138800607931674744>",
                "<:31:1138467999012110367>", "<:four:1151556783207366706>",
                "<:five:1151556781550612541>", "<:six:1151556790367035502>",
                "<:seven:1151556787741409480>", "<:eight:1151556778983690342>",
                "<:nine:1151556784675360920>", "<:ten:1151556792430624839>"
            ]

            if –≤—ã–±–µ—Ä–∏ in ["–û–Ω–ª–∞–π–Ω", "–õ–∞–≤ —Ä—É–º—ã"]:
                for member_id in pages[currentTopPage[str(inter.author.id)]]:
                    if currentTopPage[str(inter.author.id)] > 0:
                        emoji_number = idd + (currentTopPage[str(inter.author.id)] * items_per_page)
                    else:
                        emoji_number = emoji_numbers[idd - 1] if 0 <= idd <= len(emoji_numbers) else ""
                    collection = cluster.sweetness[collection_name]
                    N = collection.find_one({"_id": str(member_id)})[output]
                    embed.description += f"**{emoji_number} ‚Äî <@{member_id}>** {emoji} **{N // hour}**—á. **{(N - (N // hour * hour)) // 60}**–º.\n\n"
                    idd += 1
            else:
                for member_id in pages[currentTopPage[str(inter.author.id)]]:
                    if currentTopPage[str(inter.author.id)] > 0:
                        emoji_number = idd + (currentTopPage[str(inter.author.id)] * items_per_page)
                    else:
                        emoji_number = emoji_numbers[idd - 1] if 0 <= idd <= len(emoji_numbers) else ""
                    collection = cluster.sweetness[collection_name]
                    N = collection.find_one({"_id": str(member_id)})[output]
                    embed.description += f"**{emoji_number} ‚Äî <@{member_id}>** {emoji} {N}\n\n"
                    idd += 1
                    
            embed.set_author(name = f"üìã –¢–æ–ø –ø–æ {–≤—ã–±–µ—Ä–∏}", icon_url = inter.guild.icon.url)
            embed.set_thumbnail(url=inter.author.display_avatar.url)
            embed.set_footer(text=f"–ó–∞–ø—Ä–æ—Å–∏–ª(–∞) {inter.author}", icon_url=inter.author.display_avatar.url)
            return await inter.response.edit_message(content=inter.author.mention, embed=embed, view=TopList(inter.author.id))
    
def setup(bot): 
    bot.add_cog(topcog(bot))